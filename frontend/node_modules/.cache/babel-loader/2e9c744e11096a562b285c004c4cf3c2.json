{"ast":null,"code":"const ADD_CARDS_TO_PONE_DECKS = 'deck/ADD_CARDS_TO_PONE_DECKS';\nconst ADD_CARDS_TO_PTWO_DECKS = 'deck/ADD_CARDS_TO_PTWO_DECKS';\nconst DISTRIBUTED_PONE_CARDS = 'deck/DISTRIBUTED_PONE_CARDS';\nconst DISTRIBUTED_PTWO_CARDS = 'deck/DISTRIBUTED_PTWO_CARDS';\nconst ADD_TO_POT = 'pot/ADD_TO_POT';\nconst GET_POT = 'pot/GET_POT';\nconst DELETE_PLAYERONE_CARD = 'delete/PLAYERONE_CARD';\nconst DELETE_PLAYERTWO_CARD = 'delete/PLAYERTWO_CARD';\n\nconst add_to_pOne_deck = deck => {\n  return {\n    type: ADD_CARDS_TO_PONE_DECKS,\n    payload: deck\n  };\n};\n\nconst add_to_pTwo_deck = deck => {\n  return {\n    type: ADD_CARDS_TO_PTWO_DECKS,\n    payload: deck\n  };\n};\n\nconst new_player_one_deck = deck => {\n  return {\n    type: DISTRIBUTED_PONE_CARDS,\n    payload: deck\n  };\n};\n\nconst new_player_two_deck = deck => {\n  return {\n    type: DISTRIBUTED_PTWO_CARDS,\n    payload: deck\n  };\n};\n\nconst add_to_pot = pot => {\n  return {\n    type: ADD_TO_POT,\n    payload: pot\n  };\n};\n\nconst get_pot = pot => {\n  return {\n    type: GET_POT,\n    payload: pot\n  };\n};\n\nconst delete_playerOne_card = deck => {\n  return {\n    type: DELETE_PLAYERONE_CARD,\n    payload: deck\n  };\n};\n\nconst delete_playerTwo_card = deck => {\n  return {\n    type: DELETE_PLAYERTWO_CARD,\n    payload: deck\n  };\n};\n\nexport const get_player_decks = () => async dispatch => {\n  const response = await fetch('/war/playerDecks');\n\n  if (response.ok) {\n    const data = await response.json();\n    await dispatch(add_to_pOne_deck(data.playerOneDeck));\n    await dispatch(add_to_pTwo_deck(data.playerTwoDeck));\n    return data;\n  }\n};\nexport const addDecksToDatabase = body => async dispatch => {\n  const response = await fetch('/war/start', {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    await dispatch(add_to_pOne_deck(data.playerOneDeck));\n    await dispatch(add_to_pTwo_deck(data.playerTwoDeck));\n    return data;\n  }\n};\nexport const deletePlayerCards = body => async dispatch => {\n  const response = await fetch(`/war/deleteCards/`, {\n    method: \"Delete\"\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    await dispatch(delete_playerOne_card(data.newPOneDeck));\n    await dispatch(delete_playerTwo_card(data.newPTwoDeck));\n    return data;\n  }\n};\nexport const distributeToPlayerOneDeck = body => async dispatch => {\n  const response = await fetch(`/war/distributeCards/${body.winner}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    await dispatch(new_player_one_deck(data.newDeck));\n    return data;\n  }\n};\nexport const distributeToPlayerTwoDeck = body => async dispatch => {\n  const response = await fetch(`/war/distributeCards/${body.winner}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    await dispatch(new_player_two_deck(data.newDeckTwo));\n    return data;\n  }\n};\nexport const getPot = body => async dispatch => {\n  const response = await fetch('/war/pot');\n\n  if (response.ok) {\n    const data = await response.json();\n    await dispatch(get_pot(data.pot));\n    return data;\n  }\n};\nexport const addToPot = body => async dispatch => {\n  const response = await fetch('/war/pot', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    await dispatch(add_to_pot(data.pot));\n    return data;\n  }\n};\nconst initialState = {\n  decks: null\n};\n\nconst playerDeckReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newState;\n\n  switch (action.type) {\n    case ADD_CARDS_TO_PONE_DECKS:\n      newState = Object.assign({}, state);\n      newState.playerOneDeck = action.payload;\n      return newState;\n\n    case ADD_CARDS_TO_PTWO_DECKS:\n      newState = Object.assign({}, state);\n      newState.playerTwoDeck = action.payload;\n      return newState;\n\n    case ADD_TO_POT:\n      newState = Object.assign({}, state);\n      newState.pot = action.payload;\n      return newState;\n\n    case GET_POT:\n      newState = Object.assign({}, state);\n      newState.pot = action.payload;\n      return newState;\n\n    case DISTRIBUTED_PONE_CARDS:\n      newState = Object.assign({}, state);\n      newState.playerOneDeck = action.payload;\n      return newState;\n\n    case DISTRIBUTED_PTWO_CARDS:\n      newState = Object.assign({}, state);\n      newState.playerTwoDeck = action.payload;\n      return newState;\n\n    case DELETE_PLAYERONE_CARD:\n      newState = Object.assign({}, state);\n      newState.playerOneDeck = action.payload;\n      return newState;\n\n    case DELETE_PLAYERTWO_CARD:\n      newState = Object.assign({}, state);\n      newState.playerTwoDeck = action.payload;\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default playerDeckReducer;","map":{"version":3,"sources":["/Users/liu/Desktop/AppAcademy/TakeHomeProj/frontend/war_card_game/src/store/playerdecks.js"],"names":["ADD_CARDS_TO_PONE_DECKS","ADD_CARDS_TO_PTWO_DECKS","DISTRIBUTED_PONE_CARDS","DISTRIBUTED_PTWO_CARDS","ADD_TO_POT","GET_POT","DELETE_PLAYERONE_CARD","DELETE_PLAYERTWO_CARD","add_to_pOne_deck","deck","type","payload","add_to_pTwo_deck","new_player_one_deck","new_player_two_deck","add_to_pot","pot","get_pot","delete_playerOne_card","delete_playerTwo_card","get_player_decks","dispatch","response","fetch","ok","data","json","playerOneDeck","playerTwoDeck","addDecksToDatabase","body","method","headers","JSON","stringify","deletePlayerCards","newPOneDeck","newPTwoDeck","distributeToPlayerOneDeck","winner","newDeck","distributeToPlayerTwoDeck","newDeckTwo","getPot","addToPot","initialState","decks","playerDeckReducer","state","action","newState","Object","assign"],"mappings":"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","sourcesContent":["const ADD_CARDS_TO_PONE_DECKS = 'deck/ADD_CARDS_TO_PONE_DECKS';\nconst ADD_CARDS_TO_PTWO_DECKS = 'deck/ADD_CARDS_TO_PTWO_DECKS';\nconst DISTRIBUTED_PONE_CARDS = 'deck/DISTRIBUTED_PONE_CARDS';\nconst DISTRIBUTED_PTWO_CARDS = 'deck/DISTRIBUTED_PTWO_CARDS';\nconst ADD_TO_POT = 'pot/ADD_TO_POT';\nconst GET_POT = 'pot/GET_POT';\nconst DELETE_PLAYERONE_CARD = 'delete/PLAYERONE_CARD';\nconst DELETE_PLAYERTWO_CARD = 'delete/PLAYERTWO_CARD';\n\nconst add_to_pOne_deck = (deck) => {\n    return {\n        type: ADD_CARDS_TO_PONE_DECKS,\n        payload: deck\n    }\n}\n\nconst add_to_pTwo_deck = (deck) => {\n    return {\n        type: ADD_CARDS_TO_PTWO_DECKS,\n        payload: deck\n    }\n}\n\nconst new_player_one_deck = (deck) => {\n    return {\n        type: DISTRIBUTED_PONE_CARDS,\n        payload: deck\n    }\n}\n\nconst new_player_two_deck = (deck) => {\n    return {\n        type: DISTRIBUTED_PTWO_CARDS,\n        payload: deck\n    }\n}\n\nconst add_to_pot = (pot) => {\n    return {\n        type: ADD_TO_POT,\n        payload: pot\n    }\n}\n\nconst get_pot = (pot) => {\n    return {\n        type: GET_POT,\n        payload: pot\n    }\n}\n\nconst delete_playerOne_card = (deck) => {\n    return {\n        type: DELETE_PLAYERONE_CARD,\n        payload: deck\n    }\n}\n\nconst delete_playerTwo_card = (deck) => {\n    return {\n        type: DELETE_PLAYERTWO_CARD,\n        payload: deck\n    }\n}\n\nexport const get_player_decks = () => async (dispatch) => {\n\n    const response = await fetch('/war/playerDecks')\n\n    if (response.ok) {\n        const data = await response.json()\n        await dispatch(add_to_pOne_deck(data.playerOneDeck))\n        await dispatch(add_to_pTwo_deck(data.playerTwoDeck))\n        return data\n    }\n}\n\n\n\nexport const addDecksToDatabase = (body) => async (dispatch) => {\n\n    const response = await fetch('/war/start', {\n        method: \"POST\",\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body)\n    })\n\n    if (response.ok) {\n        const data = await response.json();\n        await dispatch(add_to_pOne_deck(data.playerOneDeck))\n        await dispatch(add_to_pTwo_deck(data.playerTwoDeck))\n        return data\n    }\n\n}\n\nexport const deletePlayerCards = (body) => async (dispatch) => {\n    const response = await fetch(`/war/deleteCards/`, {\n        method: \"Delete\"\n    })\n\n    if (response.ok) {\n        const data = await response.json();\n        await dispatch(delete_playerOne_card(data.newPOneDeck))\n        await dispatch(delete_playerTwo_card(data.newPTwoDeck))\n        return data\n    }\n}\n\n\nexport const distributeToPlayerOneDeck = (body) => async (dispatch) => {\n    const response = await fetch(`/war/distributeCards/${body.winner}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body)\n    })\n\n    if (response.ok) {\n        const data = await response.json()\n        await dispatch(new_player_one_deck(data.newDeck))\n        return data\n    }\n\n\n}\n\nexport const distributeToPlayerTwoDeck = (body) => async (dispatch) => {\n    const response = await fetch(`/war/distributeCards/${body.winner}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body)\n    })\n\n    if (response.ok) {\n        const data = await response.json()\n        await dispatch(new_player_two_deck(data.newDeckTwo))\n        return data\n    }\n\n}\n\nexport const getPot = (body) => async (dispatch) => {\n    const response = await fetch('/war/pot')\n\n    if (response.ok) {\n        const data = await response.json()\n        await dispatch(get_pot(data.pot))\n        return data\n    }\n\n}\n\nexport const addToPot = (body) => async (dispatch) => {\n\n    const response = await fetch('/war/pot', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body)\n    })\n\n    if (response.ok) {\n        const data = await response.json()\n        await dispatch(add_to_pot(data.pot))\n        return data\n    }\n\n}\n\n\n\nconst initialState = { decks: null }\n\nconst playerDeckReducer = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ADD_CARDS_TO_PONE_DECKS:\n            newState = Object.assign({}, state);\n            newState.playerOneDeck = action.payload;\n            return newState;\n        case ADD_CARDS_TO_PTWO_DECKS:\n            newState = Object.assign({}, state);\n            newState.playerTwoDeck = action.payload;\n            return newState;\n        case ADD_TO_POT:\n            newState = Object.assign({}, state);\n            newState.pot = action.payload;\n            return newState;\n        case GET_POT:\n            newState = Object.assign({}, state);\n            newState.pot = action.payload;\n            return newState;\n        case DISTRIBUTED_PONE_CARDS:\n            newState = Object.assign({}, state);\n            newState.playerOneDeck = action.payload;\n            return newState;\n        case DISTRIBUTED_PTWO_CARDS:\n            newState = Object.assign({}, state);\n            newState.playerTwoDeck = action.payload;\n            return newState;\n        case DELETE_PLAYERONE_CARD:\n            newState = Object.assign({}, state);\n            newState.playerOneDeck = action.payload;\n            return newState;\n        case DELETE_PLAYERTWO_CARD:\n            newState = Object.assign({}, state);\n            newState.playerTwoDeck = action.payload;\n            return newState;\n        default:\n            return state;\n    }\n}\n\nexport default playerDeckReducer;"]},"metadata":{},"sourceType":"module"}