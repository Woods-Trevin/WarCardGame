{"ast":null,"code":"const ADD_CARDS_TO_DECKS = 'deck/ADD_CARDS_TO_DECKS';\nconst GET_DECKS = 'decks/GET_DECKS';\nconst ADD_TO_POT = 'pot/ADD_TO_POT';\nconst GET_POT = 'pot/GET_POT';\nconst DELETE_PLAYER_CARDS_DISTRIBUTE = 'delete/PLAYER_CARDS';\nconst DELETE_PLAYERTWO_CARD = 'delete/PLAYERTWO_CARD';\n\nconst add_cards_to_decks = deck => {\n  return {\n    type: ADD_CARDS_TO_DECKS,\n    payload: deck\n  };\n};\n\nconst get_decks = deck => {\n  return {\n    type: GET_DECKS,\n    payload: deck\n  };\n};\n\nconst add_to_pot = pot => {\n  return {\n    type: ADD_TO_POT,\n    payload: pot\n  };\n};\n\nconst get_pot = pot => {\n  return {\n    type: GET_POT,\n    payload: pot\n  };\n};\n\nconst delete_distribute_player_card = deck => {\n  return {\n    type: DELETE_PLAYER_CARDS_DISTRIBUTE,\n    payload: deck\n  };\n};\n\nexport const get_player_decks = () => async dispatch => {\n  const response = await fetch('/war/playerDecks');\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(get_decks(data.playerOneDeck));\n    return data;\n  }\n};\nexport const addDecksToDatabase = body => async dispatch => {\n  const response = await fetch('/war/start', {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(add_cards_to_decks({\n      pOneData: data.playerOneDeck,\n      pTwoData: data.playerTwoDeck\n    }));\n    return data;\n  }\n};\nexport const DeleteAndDistributePlayerCards = body => async dispatch => {\n  const response = await fetch(`/war/deleteCards/`, {\n    method: \"Delete\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(delete_distribute_player_card({\n      dataOne: data.newPOneDeck,\n      dataTwo: data.newPTwoDeck\n    })); // await dispatch(delete_playerTwo_card(data.newPTwoDeck))\n\n    return data;\n  }\n};\nexport const getPot = body => async dispatch => {\n  const response = await fetch('/war/pot');\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(get_pot(data.pot));\n    return data;\n  }\n};\nexport const addToPot = body => async dispatch => {\n  const response = await fetch('/war/pot', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(add_to_pot(data.pot));\n    return data;\n  }\n};\nconst initialState = {\n  decks: null\n};\n\nconst playerDeckReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newState;\n\n  switch (action.type) {\n    case GET_DECKS:\n      newState = Object.assign({}, state);\n      newState.playerOneDeck = action.payload.pOneData;\n      newState.playerTwoDeck = action.payload.pTwoData;\n      return newState;\n\n    case ADD_CARDS_TO_DECKS:\n      newState = Object.assign({}, state);\n      newState.playerOneDeck = action.payload.pOneData;\n      newState.playerTwoDeck = action.payload.pTwoData;\n      return newState;\n\n    case ADD_TO_POT:\n      newState = Object.assign({}, state);\n      newState.pot = action.payload;\n      return newState;\n\n    case GET_POT:\n      newState = Object.assign({}, state);\n      newState.pot = action.payload;\n      return newState;\n\n    case DELETE_PLAYER_CARDS_DISTRIBUTE:\n      newState = Object.assign({}, state);\n      newState.playerOneDeck = action.payload.dataOne;\n      newState.playerTwoDeck = action.payload.dataTwo;\n      return newState;\n\n    case DELETE_PLAYERTWO_CARD:\n      newState = Object.assign({}, state);\n      newState.playerTwoDeck = action.payload;\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default playerDeckReducer;","map":{"version":3,"sources":["/Users/liu/Desktop/AppAcademy/TakeHomeProj/frontend/war_card_game/src/store/playerdecks.js"],"names":["ADD_CARDS_TO_DECKS","GET_DECKS","ADD_TO_POT","GET_POT","DELETE_PLAYER_CARDS_DISTRIBUTE","DELETE_PLAYERTWO_CARD","add_cards_to_decks","deck","type","payload","get_decks","add_to_pot","pot","get_pot","delete_distribute_player_card","get_player_decks","dispatch","response","fetch","ok","data","json","playerOneDeck","addDecksToDatabase","body","method","headers","JSON","stringify","pOneData","pTwoData","playerTwoDeck","DeleteAndDistributePlayerCards","dataOne","newPOneDeck","dataTwo","newPTwoDeck","getPot","addToPot","initialState","decks","playerDeckReducer","state","action","newState","Object","assign"],"mappings":"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","sourcesContent":["const ADD_CARDS_TO_DECKS = 'deck/ADD_CARDS_TO_DECKS';\nconst GET_DECKS = 'decks/GET_DECKS';\nconst ADD_TO_POT = 'pot/ADD_TO_POT';\nconst GET_POT = 'pot/GET_POT';\nconst DELETE_PLAYER_CARDS_DISTRIBUTE = 'delete/PLAYER_CARDS';\nconst DELETE_PLAYERTWO_CARD = 'delete/PLAYERTWO_CARD';\n\nconst add_cards_to_decks = (deck) => {\n    return {\n        type: ADD_CARDS_TO_DECKS,\n        payload: deck\n    }\n}\n\nconst get_decks = (deck) => {\n    return {\n        type: GET_DECKS,\n        payload: deck\n    }\n}\n\nconst add_to_pot = (pot) => {\n    return {\n        type: ADD_TO_POT,\n        payload: pot\n    }\n}\n\nconst get_pot = (pot) => {\n    return {\n        type: GET_POT,\n        payload: pot\n    }\n}\n\nconst delete_distribute_player_card = (deck) => {\n    return {\n        type: DELETE_PLAYER_CARDS_DISTRIBUTE,\n        payload: deck\n    }\n}\n\n\nexport const get_player_decks = () => async (dispatch) => {\n\n    const response = await fetch('/war/playerDecks')\n\n    if (response.ok) {\n        const data = await response.json()\n        dispatch(get_decks(data.playerOneDeck))\n\n        return data\n    }\n}\n\n\n\nexport const addDecksToDatabase = (body) => async (dispatch) => {\n\n    const response = await fetch('/war/start', {\n        method: \"POST\",\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body)\n    })\n\n    if (response.ok) {\n        const data = await response.json();\n        dispatch(add_cards_to_decks({ pOneData: data.playerOneDeck, pTwoData: data.playerTwoDeck }))\n        return data\n    }\n\n}\n\nexport const DeleteAndDistributePlayerCards = (body) => async (dispatch) => {\n    const response = await fetch(`/war/deleteCards/`, {\n        method: \"Delete\",\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body)\n    })\n\n    if (response.ok) {\n        const data = await response.json();\n        dispatch(delete_distribute_player_card({ dataOne: data.newPOneDeck, dataTwo: data.newPTwoDeck }))\n        // await dispatch(delete_playerTwo_card(data.newPTwoDeck))\n        return data\n    }\n}\n\n\nexport const getPot = (body) => async (dispatch) => {\n    const response = await fetch('/war/pot')\n\n    if (response.ok) {\n        const data = await response.json()\n        dispatch(get_pot(data.pot))\n        return data\n    }\n\n}\n\nexport const addToPot = (body) => async (dispatch) => {\n\n    const response = await fetch('/war/pot', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body)\n    })\n\n    if (response.ok) {\n        const data = await response.json()\n        dispatch(add_to_pot(data.pot))\n        return data\n    }\n\n}\n\n\n\nconst initialState = { decks: null }\n\nconst playerDeckReducer = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case GET_DECKS:\n            newState = Object.assign({}, state);\n            newState.playerOneDeck = action.payload.pOneData;\n            newState.playerTwoDeck = action.payload.pTwoData;\n            return newState;\n        case ADD_CARDS_TO_DECKS:\n            newState = Object.assign({}, state);\n            newState.playerOneDeck = action.payload.pOneData;\n            newState.playerTwoDeck = action.payload.pTwoData;\n            return newState;\n        case ADD_TO_POT:\n            newState = Object.assign({}, state);\n            newState.pot = action.payload;\n            return newState;\n        case GET_POT:\n            newState = Object.assign({}, state);\n            newState.pot = action.payload;\n            return newState;\n        case DELETE_PLAYER_CARDS_DISTRIBUTE:\n            newState = Object.assign({}, state);\n            newState.playerOneDeck = action.payload.dataOne;\n            newState.playerTwoDeck = action.payload.dataTwo;\n            return newState;\n        case DELETE_PLAYERTWO_CARD:\n            newState = Object.assign({}, state);\n            newState.playerTwoDeck = action.payload;\n            return newState;\n        default:\n            return state;\n    }\n}\n\nexport default playerDeckReducer;"]},"metadata":{},"sourceType":"module"}