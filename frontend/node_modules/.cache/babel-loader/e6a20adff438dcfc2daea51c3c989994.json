{"ast":null,"code":"const ADD_CARDS_TO_PONE_DECKS = 'deck/ADD_CARDS_TO_PONE_DECKS';\nconst ADD_CARDS_TO_PTWO_DECKS = 'deck/ADD_CARDS_TO_PTWO_DECKS';\n\nconst add_to_pOne_deck = deck => {\n  return {\n    type: ADD_CARDS_TO_PONE_DECKS,\n    payload: deck\n  };\n};\n\nconst add_to_pTwo_deck = deck => {\n  return {\n    type: ADD_CARDS_TO_PTWO_DECKS,\n    payload: deck\n  };\n};\n\nexport const get_player_decks = () => async dispatch => {\n  const response = await fetch('/fil');\n};\nexport const AddToDecks = body => async dispatch => {\n  const response = await fetch('/war/startgame', {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n\n  if (response.ok) {\n    const responseData = await response.json();\n    return responseData;\n  }\n};\nconst initialState = {\n  decks: null\n};\n\nconst playerDeckReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newState;\n\n  switch (action.type) {\n    case ADD_CARDS_TO_PONE_DECKS:\n      newState = Object.assign({}, state);\n      newState.playerOneDeck = action.payload;\n      return newState;\n\n    case ADD_CARDS_TO_PTWO_DECKS:\n      newState = Object.assign({}, state);\n      newState.playerTwoDeck = action.payload;\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default playerDeckReducer;","map":{"version":3,"sources":["/Users/liu/Desktop/AppAcademy/TakeHomeProj/frontend/war_card_game/src/store/playerdecks.js"],"names":["ADD_CARDS_TO_PONE_DECKS","ADD_CARDS_TO_PTWO_DECKS","add_to_pOne_deck","deck","type","payload","add_to_pTwo_deck","get_player_decks","dispatch","response","fetch","AddToDecks","body","method","headers","JSON","stringify","ok","responseData","json","initialState","decks","playerDeckReducer","state","action","newState","Object","assign","playerOneDeck","playerTwoDeck"],"mappings":"AAAA,MAAMA,uBAAuB,GAAG,8BAAhC;AACA,MAAMC,uBAAuB,GAAG,8BAAhC;;AAGA,MAAMC,gBAAgB,GAAIC,IAAD,IAAU;AAC/B,SAAO;AACHC,IAAAA,IAAI,EAAEJ,uBADH;AAEHK,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMG,gBAAgB,GAAIH,IAAD,IAAU;AAC/B,SAAO;AACHC,IAAAA,IAAI,EAAEH,uBADH;AAEHI,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,MAAMI,gBAAgB,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAEtD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,MAAD,CAA5B;AACH,CAHM;AAOP,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAU,MAAOJ,QAAP,IAAoB;AAEpD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAD,EAAmB;AAC3CG,IAAAA,MAAM,EAAE,MADmC;AAE3CC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFkC;AAG3CF,IAAAA,IAAI,EAAEG,IAAI,CAACC,SAAL,CAAeJ,IAAf;AAHqC,GAAnB,CAA5B;;AAMA,MAAIH,QAAQ,CAACQ,EAAb,EAAiB;AACb,UAAMC,YAAY,GAAG,MAAMT,QAAQ,CAACU,IAAT,EAA3B;AACA,WAAOD,YAAP;AACH;AAEJ,CAbM;AAgBP,MAAME,YAAY,GAAG;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAArB;;AAEA,MAAMC,iBAAiB,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;AACxD,MAAIC,QAAJ;;AACA,UAAQD,MAAM,CAACpB,IAAf;AACI,SAAKJ,uBAAL;AACIyB,MAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,CAAX;AACAE,MAAAA,QAAQ,CAACG,aAAT,GAAyBJ,MAAM,CAACnB,OAAhC;AACA,aAAOoB,QAAP;;AACJ,SAAKxB,uBAAL;AACIwB,MAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,CAAX;AACAE,MAAAA,QAAQ,CAACI,aAAT,GAAyBL,MAAM,CAACnB,OAAhC;AACA,aAAOoB,QAAP;;AACJ;AACI,aAAOF,KAAP;AAVR;AAYH,CAdD;;AAgBA,eAAeD,iBAAf","sourcesContent":["const ADD_CARDS_TO_PONE_DECKS = 'deck/ADD_CARDS_TO_PONE_DECKS';\nconst ADD_CARDS_TO_PTWO_DECKS = 'deck/ADD_CARDS_TO_PTWO_DECKS';\n\n\nconst add_to_pOne_deck = (deck) => {\n    return {\n        type: ADD_CARDS_TO_PONE_DECKS,\n        payload: deck\n    }\n}\n\nconst add_to_pTwo_deck = (deck) => {\n    return {\n        type: ADD_CARDS_TO_PTWO_DECKS,\n        payload: deck\n    }\n}\n\nexport const get_player_decks = () => async (dispatch) => {\n\n    const response = await fetch('/fil')\n}\n\n\n\nexport const AddToDecks = (body) => async (dispatch) => {\n\n    const response = await fetch('/war/startgame', {\n        method: \"POST\",\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body)\n    })\n\n    if (response.ok) {\n        const responseData = await response.json();\n        return responseData\n    }\n\n}\n\n\nconst initialState = { decks: null }\n\nconst playerDeckReducer = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ADD_CARDS_TO_PONE_DECKS:\n            newState = Object.assign({}, state);\n            newState.playerOneDeck = action.payload\n            return newState;\n        case ADD_CARDS_TO_PTWO_DECKS:\n            newState = Object.assign({}, state);\n            newState.playerTwoDeck = action.payload\n            return newState;\n        default:\n            return state;\n    }\n}\n\nexport default playerDeckReducer;"]},"metadata":{},"sourceType":"module"}