{"ast":null,"code":"var _jsxFileName = \"/Users/liu/Desktop/AppAcademy/TakeHomeProj/frontend/war_card_game/src/components/mainpage/index.js\",\n    _s = $RefreshSig$();\n\nimport \"./mainpage.css\";\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as playerDecks from '../../store/playerdecks';\nimport club from '../images/club.png';\nimport spade from '../images/spade.png';\nimport heart from '../images/heart.jpeg';\nimport diamond from '../images/diamond.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst deck = require('../../deck');\n\nfunction Mainpage() {\n  _s();\n\n  const [shuffledDeck, setShuffledDeck] = useState(); // console.log(shuffledDeck);\n\n  const [playerOneCards, setPlayerOneCards] = useState();\n  const [playerTwoCards, setPlayerTwoCards] = useState();\n  const dispatch = useDispatch();\n  const pOneDeck = useSelector(state => {\n    var _state$playerDecks;\n\n    return (_state$playerDecks = state.playerDecks) === null || _state$playerDecks === void 0 ? void 0 : _state$playerDecks.playerOneDeck;\n  }); // console.log(pOneDeck.pop())\n\n  const pTwoDeck = useSelector(state => {\n    var _state$playerDecks2;\n\n    return (_state$playerDecks2 = state.playerDecks) === null || _state$playerDecks2 === void 0 ? void 0 : _state$playerDecks2.playerTwoDeck;\n  }); // console.log(pTwoDeck.pop())\n\n  var pOneCard = useSelector(state => {\n    var _state$playerDecks3;\n\n    return (_state$playerDecks3 = state.playerDecks) === null || _state$playerDecks3 === void 0 ? void 0 : _state$playerDecks3.playerOneCard;\n  });\n  var pTwoCard = useSelector(state => {\n    var _state$playerDecks4;\n\n    return (_state$playerDecks4 = state.playerDecks) === null || _state$playerDecks4 === void 0 ? void 0 : _state$playerDecks4.playerTwoCard;\n  });\n  const [renderStartBtn, setRenderStartBtn] = useState(true);\n\n  function shuffle(deck) {\n    let currentIndex = deck.length;\n    let randomIndex = 0; // O(n)\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [deck[currentIndex], deck[randomIndex]] = [deck[randomIndex], deck[currentIndex]];\n    } // console.log(deck);\n\n\n    return deck;\n  }\n\n  function distributeCards(deck) {\n    let playerOneCards = deck.splice(0, 26);\n    setPlayerOneCards(playerOneCards);\n    let playerTwoCards = deck;\n    setPlayerTwoCards(playerTwoCards);\n  }\n\n  const translateFC = cardVal => {\n    console.log(cardVal, \"CARD VALUE FOR FACECARD\");\n\n    if (cardVal === 'J') {\n      return 11;\n    } else if (cardVal === 'Q') {\n      return 12;\n    } else if (cardVal === 'K') {\n      return 13;\n    } else if (cardVal === 'A') {\n      return 14;\n    } else {\n      return Number(cardVal);\n    }\n  };\n\n  const calculate = (pOneCard, pTwoCard) => {\n    const pOneCardSplit = pOneCard.split(',');\n    console.log(pOneCardSplit);\n    const pTwoCardSplit = pTwoCard.split(',');\n    console.log(pTwoCardSplit);\n\n    if (pOneCardSplit[3] === 'false' && pTwoCardSplit[3] === 'false') {\n      //both cards are number cards\n      //compare numbers from index 1 of initial split    \n      if (Number(pOneCardSplit[1]) < Number(pTwoCardSplit[1])) {\n        sessionStorage.setItem('winner', 2);\n        setPhase(Phase.Distribution);\n        sessionStorage.setItem('phase', Phase.Distribution);\n        sessionStorage.setItem('war', 'No War');\n      } else if (Number(pOneCardSplit[1]) > Number(pTwoCardSplit[1])) {\n        sessionStorage.setItem('winner', 1);\n        setPhase(Phase.Distribution);\n        sessionStorage.setItem('phase', Phase.Distribution);\n        sessionStorage.setItem('war', 'No War');\n      } else {\n        setPhase(Phase.War);\n        sessionStorage.setItem('phase', Phase.War);\n        sessionStorage.setItem('war', 'War');\n      }\n    } else if (!(pOneCardSplit[3] === 'false' && pTwoCardSplit[3] === 'false')) {\n      //either both cards are not number cards or one card is not a number card\n      const pOneCardVal = pOneCardSplit[1];\n      const pTwoCardVal = pTwoCardSplit[1];\n      const pOneVal = translateFC(pOneCardVal);\n      console.log(pOneVal, \"VALUE OF PLAYER ONE CARD\");\n      const pTwoVal = translateFC(pTwoCardVal);\n      console.log(pTwoVal, \"VALUE OF PLAYER TWO CARD\");\n\n      if (pOneVal > pTwoVal) {\n        sessionStorage.setItem('winner', 1);\n        setPhase(Phase.Distribution);\n        sessionStorage.setItem('phase', Phase.Distribution);\n        sessionStorage.setItem('war', 'No War');\n      } else if (pOneVal < pTwoVal) {\n        sessionStorage.setItem('winner', 2);\n        setPhase(Phase.Distribution);\n        sessionStorage.setItem('phase', Phase.Distribution);\n        sessionStorage.setItem('war', 'No War');\n      } else {\n        setPhase(Phase.War);\n        sessionStorage.setItem('phase', Phase.War);\n        sessionStorage.setItem('war', 'War');\n      }\n    }\n  };\n\n  function battle(pOneFaceUp, pTwoFaceUp) {\n    let fd1 = 1;\n    let fd2 = 2;\n    let fd3 = 3;\n    let potArray = [];\n\n    if (pOneFaceUp.face === 'false' && pTwoFaceUp.face === 'false') {\n      let pOneFaceDownOne = pOneDeck[fd1];\n      let pOneFaceDownTwo = pOneDeck[fd2];\n      let pOneFaceDownThree = pOneDeck[fd3];\n      let pTwoFaceDownOne = pTwoDeck[fd1];\n      let pTwoFaceDownTwo = pTwoDeck[fd2];\n      let pTwoFaceDownThree = pTwoDeck[fd3];\n      potArray.push(pOneFaceDownOne);\n      potArray.push(pOneFaceDownTwo);\n      potArray.push(pOneFaceDownThree);\n      potArray.push(pOneFaceUp);\n      potArray.push(pTwoFaceDownOne);\n      potArray.push(pTwoFaceDownTwo);\n      potArray.push(pTwoFaceDownThree);\n      potArray.push(pTwoFaceUp); // console.log(potArray, \"POT ARRAY WHEN CARDS ARE NOT FCs\")\n\n      if (Number(pOneFaceUp.number) < Number(pTwoFaceUp.number)) {\n        sessionStorage.setItem('winner', 2);\n      } else {\n        sessionStorage.setItem('winner', 1);\n      }\n    } else {\n      let pOneFaceDownOne = pOneDeck[fd1];\n      let pOneFaceDownTwo = pOneDeck[fd2];\n      let pOneFaceDownThree = pOneDeck[fd3];\n      potArray.push(pOneFaceDownOne);\n      potArray.push(pOneFaceDownTwo);\n      potArray.push(pOneFaceDownThree);\n      potArray.push(pOneFaceUp);\n      let pTwoFaceDownOne = pTwoDeck[fd1];\n      let pTwoFaceDownTwo = pTwoDeck[fd2];\n      let pTwoFaceDownThree = pTwoDeck[fd3];\n      potArray.push(pTwoFaceDownOne);\n      potArray.push(pTwoFaceDownTwo);\n      potArray.push(pTwoFaceDownThree);\n      potArray.push(pTwoFaceUp); // console.log(potArray, \"POT ARRAY WHEN ATLEAST ONE CARD IS FC\")\n\n      let pOneFUVal = translateFC(pOneFaceUp.number);\n      let pTwoFUVal = translateFC(pTwoFaceUp.number);\n\n      if (pOneFUVal > pTwoFUVal) {\n        sessionStorage.setItem('winner', 1);\n      } else {\n        sessionStorage.setItem('winner', 2);\n      }\n    }\n\n    return potArray;\n  }\n\n  const Phase = {\n    Draw: 'Draw',\n    Calculation: 'Calculation',\n    War: 'War',\n    Distribution: 'Distribution',\n    End: 'End'\n  };\n  const currentPhase = sessionStorage.getItem('phase');\n  const [phase, setPhase] = useState(currentPhase ? currentPhase : null);\n  const [pOneCardSuit, setPOneCardSuit] = useState();\n  const [pTwoCardSuit, setPTwoCardSuit] = useState();\n  const [pOneCardNumber, setPOneCardNumber] = useState();\n  const [pTwoCardNumber, setPTwoCardNumber] = useState(); // console.log(phase, \"CURRENT PHASE\")\n\n  useEffect(async () => {\n    const shuffledDeck = shuffle(deck);\n    setShuffledDeck(shuffledDeck);\n    distributeCards(shuffledDeck);\n    const data = await dispatch(playerDecks.get_player_decks());\n    await dispatch(playerDecks.getPot());\n\n    if (data.playerOneDeck.length && data.playerTwoDeck.length) {\n      setRenderStartBtn(false);\n    } // calculate(\"7H,8,Heart,false\", \"7D,8,Diamond,false\")\n\n\n    console.log(\"RERENDER\");\n\n    switch (phase) {\n      case Phase.Draw:\n        console.log(\"REACHED DRAW PHASE\");\n        await dispatch(playerDecks.drawCards()); // const pOneDraw = pOneDeck.shift()\n\n        const pOneDraw = pOneCard;\n        console.log(pOneDraw, \"PONE DRAW\"); // const pTwoDraw = pTwoDeck.shift()\n\n        const pTwoDraw = pTwoCard;\n        console.log(pTwoDraw, \"PTWO DRAW\");\n\n        if (!pOneDeck.length || !pTwoDeck.length) {\n          const timeout = setTimeout(async () => {\n            setPhase(Phase.End);\n            sessionStorage.setItem('phase', Phase.End);\n          }, 3500);\n          return () => clearTimeout(timeout);\n        }\n\n        const payload = [pOneDraw, pTwoDraw];\n        sessionStorage.setItem(\"pOneDraw\", [pOneDraw === null || pOneDraw === void 0 ? void 0 : pOneDraw.association, pOneDraw === null || pOneDraw === void 0 ? void 0 : pOneDraw.number, pOneDraw === null || pOneDraw === void 0 ? void 0 : pOneDraw.suit, pOneDraw === null || pOneDraw === void 0 ? void 0 : pOneDraw.face]);\n        sessionStorage.setItem(\"pOneCardSuit\", pOneDraw === null || pOneDraw === void 0 ? void 0 : pOneDraw.suit);\n        sessionStorage.setItem(\"pOneCardNum\", pOneDraw === null || pOneDraw === void 0 ? void 0 : pOneDraw.number);\n        setPOneCardSuit(sessionStorage.getItem(\"pOneCardSuit\"));\n        setPOneCardNumber(sessionStorage.getItem(\"pOneCardNum\"));\n        sessionStorage.setItem(\"pTwoDraw\", [pTwoDraw === null || pTwoDraw === void 0 ? void 0 : pTwoDraw.association, pTwoDraw === null || pTwoDraw === void 0 ? void 0 : pTwoDraw.number, pTwoDraw === null || pTwoDraw === void 0 ? void 0 : pTwoDraw.suit, pTwoDraw === null || pTwoDraw === void 0 ? void 0 : pTwoDraw.face]);\n        sessionStorage.setItem(\"pTwoCardSuit\", pTwoDraw === null || pTwoDraw === void 0 ? void 0 : pTwoDraw.suit);\n        sessionStorage.setItem(\"pTwoCardNum\", pTwoDraw === null || pTwoDraw === void 0 ? void 0 : pTwoDraw.number);\n        setPTwoCardSuit(sessionStorage.getItem(\"pTwoCardSuit\"));\n        setPTwoCardNumber(sessionStorage.getItem(\"pTwoCardNum\"));\n      // const timeout = setTimeout(async () => {\n      //     await dispatch(playerDecks.addToPot({ drawnCards: payload }))\n      //     setPhase(Phase.Calculation)\n      //     sessionStorage.setItem('phase', Phase.Calculation)\n      // }, 3500)\n      // return () => clearTimeout(timeout)\n\n      case Phase.Calculation:\n        console.log(\"REACHED CALCULATION PHASE\");\n        const pOneCard = sessionStorage.getItem(\"pOneDraw\");\n        const pTwoCard = sessionStorage.getItem(\"pTwoDraw\");\n\n        if (pOneCard && pTwoCard) {\n          const timeout = setTimeout(() => {\n            calculate(pOneCard, pTwoCard);\n          }, 3500);\n          return () => clearTimeout(timeout);\n        }\n\n        return;\n\n      case Phase.War:\n        console.log(\"REACHED WAR PHASE\"); //getting 5th card at index 4\n\n        let new_fu = 4;\n        let pOneFaceUp = pOneDeck[new_fu];\n        console.log(pOneFaceUp, \"CURRENT FACEUP PLAYER ONE\");\n        let pTwoFaceUp = pTwoDeck[new_fu];\n        console.log(pTwoFaceUp, \"CURRENT FACEUP PLAYER TWO\");\n\n        if (!pTwoFaceUp || !pOneFaceUp) {\n          const timeout = setTimeout(async () => {\n            setPhase(Phase.End);\n            sessionStorage.setItem('phase', Phase.End);\n          }, 3500);\n          return () => clearTimeout(timeout);\n        }\n\n        if (pOneFaceUp !== pTwoFaceUp) {\n          const potArray = battle(pOneFaceUp, pTwoFaceUp);\n          console.log(potArray, \"FINAL POT ARRAY WHEN SOMEONE WINS\");\n          dispatch(playerDecks.addToPot({\n            drawnCards: potArray\n          }));\n          const timeout = setTimeout(() => {\n            sessionStorage.setItem('phase', Phase.Distribution);\n            setPhase(Phase.Distribution);\n          }, 3500);\n          return () => clearTimeout(timeout);\n        } //getting all facedown cards after cards already held in pot\n\n\n        let fd1 = 1;\n        let fd2 = 2;\n        let fd3 = 3;\n        let potArray = [];\n\n        while (pOneFaceUp === pTwoFaceUp) {\n          let pOneFaceDownOne = pOneDeck[fd1];\n          let pOneFaceDownTwo = pOneDeck[fd2];\n          let pOneFaceDownThree = pOneDeck[fd3];\n          potArray.push(pOneFaceDownOne);\n          potArray.push(pOneFaceDownTwo);\n          potArray.push(pOneFaceDownThree);\n          potArray.push(pOneFaceUp);\n          let pTwoFaceDownOne = pTwoDeck[fd1];\n          let pTwoFaceDownTwo = pTwoDeck[fd2];\n          let pTwoFaceDownThree = pTwoDeck[fd3];\n          potArray.push(pTwoFaceDownOne);\n          potArray.push(pTwoFaceDownTwo);\n          potArray.push(pTwoFaceDownThree);\n          potArray.push(pTwoFaceUp);\n          console.log(potArray, \"POT ARRAY DURING AN ITERATION\");\n          new_fu += new_fu;\n          fd1 += new_fu;\n          fd2 += new_fu;\n          fd3 += new_fu;\n        }\n\n        console.log(potArray, \"FINAL POT ARRAY\");\n        let pOneFUVal = translateFC(pOneFaceUp.number);\n        let pTwoFUVal = translateFC(pTwoFaceUp.number);\n\n        if (potArray) {\n          if (pOneFUVal < pTwoFUVal) {\n            sessionStorage.setItem('winner', 2);\n            dispatch(playerDecks.addToPot({\n              drawnCards: potArray\n            }));\n            const timeout = setTimeout(() => {\n              sessionStorage.setItem('war', 'War');\n              sessionStorage.setItem('phase', Phase.Distribution);\n              setPhase(Phase.Distribution);\n            }, 3500);\n            return () => clearTimeout(timeout);\n          } else {\n            sessionStorage.setItem('winner', 1);\n            dispatch(playerDecks.addToPot({\n              drawnCards: potArray\n            }));\n            const timeout = setTimeout(() => {\n              sessionStorage.setItem('war', 'War');\n              sessionStorage.setItem('phase', Phase.Distribution);\n              setPhase(Phase.Distribution);\n            }, 3500);\n            return () => clearTimeout(timeout);\n          }\n        }\n\n        return;\n\n      case Phase.Distribution:\n        console.log(\"REACHED DISTRIBUTION PHASE\"); // const playerOneCard = sessionStorage.getItem(\"pOneDraw\")\n        // const playerTwoCard = sessionStorage.getItem(\"pTwoDraw\")\n\n        const winner = sessionStorage.getItem(\"winner\");\n        const war = sessionStorage.getItem(\"war\");\n\n        if (war === \"No War\") {\n          console.log(\"NO WAR\");\n\n          if (Number(winner) === 1) {\n            console.log('PLAYER ONE WON');\n            const data = await dispatch(playerDecks.DeleteAndDistributePlayerCards({\n              winner: Number(winner)\n            }));\n\n            if (data) {\n              const timeout = setTimeout(() => {\n                setPhase(Phase.Draw);\n                sessionStorage.setItem('phase', Phase.Draw);\n              }, 3500);\n              return () => clearTimeout(timeout);\n            }\n          }\n\n          if (Number(winner) === 2) {\n            console.log('PLAYER TWO WON');\n            const data = await dispatch(playerDecks.DeleteAndDistributePlayerCards({\n              winner: Number(winner)\n            }));\n\n            if (data) {\n              const timeout = setTimeout(() => {\n                setPhase(Phase.Draw);\n                sessionStorage.setItem('phase', Phase.Draw);\n              }, 3500);\n              return () => clearTimeout(timeout);\n            }\n          }\n        } else {\n          console.log(\"WAR\");\n\n          if (Number(winner) === 1) {\n            console.log('PLAYER ONE WON WAR');\n            const data = await dispatch(playerDecks.DeleteAndDistributePlayerCards({\n              winner: Number(winner)\n            }));\n\n            if (data) {\n              const timeout = setTimeout(() => {\n                setPhase(Phase.Draw);\n                sessionStorage.setItem('phase', Phase.Draw);\n              }, 3500);\n              return () => clearTimeout(timeout);\n            }\n          }\n\n          if (Number(winner) === 2) {\n            console.log('PLAYER TWO WON WAR');\n            const data = await dispatch(playerDecks.DeleteAndDistributePlayerCards({\n              winner: Number(winner)\n            }));\n\n            if (data) {\n              const timeout = setTimeout(() => {\n                setPhase(Phase.Draw);\n                sessionStorage.setItem('phase', Phase.Draw);\n              }, 3500);\n              return () => clearTimeout(timeout);\n            }\n          }\n        }\n\n        return;\n\n      case Phase.End:\n        console.log(\"REACHED END PHASE\");\n        return;\n    }\n  }, [dispatch, renderStartBtn, phase]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outmost_ctnr\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card_count_ctnr\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"player_one_count_label\",\n        children: [\"Player One Card Count: \", pOneDeck === null || pOneDeck === void 0 ? void 0 : pOneDeck.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"player_two_count_label\",\n        children: [\"Player Two Card Count: \", pTwoDeck === null || pTwoDeck === void 0 ? void 0 : pTwoDeck.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards_ctnr\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card_ctnr--left\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_one_card one\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_one_card two\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_one_card three\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_one_card four\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_one_card five\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_one_card six\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_one_card seven\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_one_card eight\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_one_card nine\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_one_card ten\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"phasePrompt\",\n        children: renderStartBtn && /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"startGame_btn\",\n          onClick: async () => {\n            const data = await dispatch(playerDecks.addDecksToDatabase({\n              playerOneDeck: playerOneCards,\n              playerTwoDeck: playerTwoCards\n            }));\n\n            if (data) {\n              setRenderStartBtn(false);\n              sessionStorage.setItem('phase', Phase.Draw);\n              setPhase(Phase.Draw);\n            }\n          },\n          children: \"Start Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 40\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card_ctnr--right\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_two_card one\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_two_card two\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_two_card three\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_two_card four\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_two_card five\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_two_card six\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_two_card seven\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_two_card eight\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_two_card nine\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_two_card ten\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playing_field\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pf--one\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playerOne_pf_card card-slot1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playerOne_pf_card card-slot2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playerOne_pf_card card-slot3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playerOne_pf_card card-slot4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"top_suit_ctnr\",\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"card_num\",\n              children: pOneCardNumber\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pOneCardSuit === 'Club' && club || pOneCardSuit === 'Heart' && heart || pOneCardSuit === 'Diamond' && diamond || pOneCardSuit === 'Spade' && spade,\n              className: \"suit--top\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 518,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mid_suit_ctnr\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pOneCardSuit === 'Club' && club || pOneCardSuit === 'Heart' && heart || pOneCardSuit === 'Diamond' && diamond || pOneCardSuit === 'Spade' && spade,\n              className: \"suit--mid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 521,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bottom_suit_ctnr\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: pOneCardSuit === 'Club' && club || pOneCardSuit === 'Heart' && heart || pOneCardSuit === 'Diamond' && diamond || pOneCardSuit === 'Spade' && spade,\n              className: \"suit--bottom\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"card_num\",\n              children: pOneCardNumber\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pf--two\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playerTwo_pf_card card-slot1\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"top_suit_ctnr\",\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"card_num\",\n              children: pTwoCardNumber\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pTwoCardSuit === 'Club' && club || pTwoCardSuit === 'Heart' && heart || pTwoCardSuit === 'Diamond' && diamond || pTwoCardSuit === 'Spade' && spade,\n              className: \"suit--top\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mid_suit_ctnr\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pTwoCardSuit === 'Club' && club || pTwoCardSuit === 'Heart' && heart || pTwoCardSuit === 'Diamond' && diamond || pTwoCardSuit === 'Spade' && spade,\n              className: \"suit--mid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bottom_suit_ctnr\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: pTwoCardSuit === 'Club' && club || pTwoCardSuit === 'Heart' && heart || pTwoCardSuit === 'Diamond' && diamond || pTwoCardSuit === 'Spade' && spade,\n              className: \"suit--bottom\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"card_num\",\n              children: pTwoCardNumber\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playerTwo_pf_card card-slot2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playerTwo_pf_card card-slot3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playerTwo_pf_card card-slot4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 453,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Mainpage, \"66xjyu1RNGPQwjvK1/FLUhAi0m4=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Mainpage;\n;\nexport default Mainpage;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mainpage\");","map":{"version":3,"sources":["/Users/liu/Desktop/AppAcademy/TakeHomeProj/frontend/war_card_game/src/components/mainpage/index.js"],"names":["useEffect","useState","useDispatch","useSelector","playerDecks","club","spade","heart","diamond","deck","require","Mainpage","shuffledDeck","setShuffledDeck","playerOneCards","setPlayerOneCards","playerTwoCards","setPlayerTwoCards","dispatch","pOneDeck","state","playerOneDeck","pTwoDeck","playerTwoDeck","pOneCard","playerOneCard","pTwoCard","playerTwoCard","renderStartBtn","setRenderStartBtn","shuffle","currentIndex","length","randomIndex","Math","floor","random","distributeCards","splice","translateFC","cardVal","console","log","Number","calculate","pOneCardSplit","split","pTwoCardSplit","sessionStorage","setItem","setPhase","Phase","Distribution","War","pOneCardVal","pTwoCardVal","pOneVal","pTwoVal","battle","pOneFaceUp","pTwoFaceUp","fd1","fd2","fd3","potArray","face","pOneFaceDownOne","pOneFaceDownTwo","pOneFaceDownThree","pTwoFaceDownOne","pTwoFaceDownTwo","pTwoFaceDownThree","push","number","pOneFUVal","pTwoFUVal","Draw","Calculation","End","currentPhase","getItem","phase","pOneCardSuit","setPOneCardSuit","pTwoCardSuit","setPTwoCardSuit","pOneCardNumber","setPOneCardNumber","pTwoCardNumber","setPTwoCardNumber","data","get_player_decks","getPot","drawCards","pOneDraw","pTwoDraw","timeout","setTimeout","clearTimeout","payload","association","suit","new_fu","addToPot","drawnCards","winner","war","DeleteAndDistributePlayerCards","addDecksToDatabase"],"mappings":"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","sourcesContent":["import \"./mainpage.css\";\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'\nimport * as playerDecks from '../../store/playerdecks'\nimport club from '../images/club.png'\nimport spade from '../images/spade.png'\nimport heart from '../images/heart.jpeg'\nimport diamond from '../images/diamond.png'\nconst deck = require('../../deck');\n\n\nfunction Mainpage() {\n    const [shuffledDeck, setShuffledDeck] = useState();\n    // console.log(shuffledDeck);\n    const [playerOneCards, setPlayerOneCards] = useState();\n    const [playerTwoCards, setPlayerTwoCards] = useState();\n    const dispatch = useDispatch();\n\n    const pOneDeck = useSelector(state => state.playerDecks?.playerOneDeck)\n    // console.log(pOneDeck.pop())\n    const pTwoDeck = useSelector(state => state.playerDecks?.playerTwoDeck)\n    // console.log(pTwoDeck.pop())\n    var pOneCard = useSelector(state => state.playerDecks?.playerOneCard)\n    var pTwoCard = useSelector(state => state.playerDecks?.playerTwoCard)\n\n    const [renderStartBtn, setRenderStartBtn] = useState(true)\n\n\n\n\n    function shuffle(deck) {\n        let currentIndex = deck.length;\n        let randomIndex = 0;\n\n        // O(n)\n        while (currentIndex !== 0) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n\n            [deck[currentIndex], deck[randomIndex]] = [deck[randomIndex], deck[currentIndex]]\n        }\n        // console.log(deck);\n        return deck;\n\n    }\n\n    function distributeCards(deck) {\n        let playerOneCards = deck.splice(0, 26);\n        setPlayerOneCards(playerOneCards)\n        let playerTwoCards = deck\n        setPlayerTwoCards(playerTwoCards)\n\n    }\n\n    const translateFC = (cardVal) => {\n        console.log(cardVal, \"CARD VALUE FOR FACECARD\")\n        if (cardVal === 'J') {\n            return 11;\n        } else if (cardVal === 'Q') {\n            return 12;\n        } else if (cardVal === 'K') {\n            return 13;\n        } else if (cardVal === 'A') {\n            return 14;\n        } else {\n            return Number(cardVal);\n        }\n    }\n\n    const calculate = (pOneCard, pTwoCard) => {\n        const pOneCardSplit = pOneCard.split(',')\n        console.log(pOneCardSplit)\n        const pTwoCardSplit = pTwoCard.split(',')\n        console.log(pTwoCardSplit)\n\n\n        if ((pOneCardSplit[3] === 'false' && pTwoCardSplit[3] === 'false')) {\n            //both cards are number cards\n            //compare numbers from index 1 of initial split    \n            if (Number(pOneCardSplit[1]) < Number(pTwoCardSplit[1])) {\n                sessionStorage.setItem('winner', 2)\n                setPhase(Phase.Distribution)\n                sessionStorage.setItem('phase', Phase.Distribution)\n                sessionStorage.setItem('war', 'No War')\n            } else if (Number(pOneCardSplit[1]) > Number(pTwoCardSplit[1])) {\n                sessionStorage.setItem('winner', 1)\n                setPhase(Phase.Distribution)\n                sessionStorage.setItem('phase', Phase.Distribution)\n                sessionStorage.setItem('war', 'No War')\n            } else {\n                setPhase(Phase.War)\n                sessionStorage.setItem('phase', Phase.War)\n                sessionStorage.setItem('war', 'War')\n\n            }\n        } else if (!(pOneCardSplit[3] === 'false' && pTwoCardSplit[3] === 'false')) {\n            //either both cards are not number cards or one card is not a number card\n            const pOneCardVal = pOneCardSplit[1]\n            const pTwoCardVal = pTwoCardSplit[1]\n            const pOneVal = translateFC(pOneCardVal)\n            console.log(pOneVal, \"VALUE OF PLAYER ONE CARD\")\n            const pTwoVal = translateFC(pTwoCardVal)\n            console.log(pTwoVal, \"VALUE OF PLAYER TWO CARD\")\n\n            if (pOneVal > pTwoVal) {\n                sessionStorage.setItem('winner', 1)\n                setPhase(Phase.Distribution)\n                sessionStorage.setItem('phase', Phase.Distribution)\n                sessionStorage.setItem('war', 'No War')\n\n\n            } else if (pOneVal < pTwoVal) {\n                sessionStorage.setItem('winner', 2)\n                setPhase(Phase.Distribution)\n                sessionStorage.setItem('phase', Phase.Distribution)\n                sessionStorage.setItem('war', 'No War')\n\n            } else {\n                setPhase(Phase.War)\n                sessionStorage.setItem('phase', Phase.War)\n                sessionStorage.setItem('war', 'War')\n            }\n        }\n\n\n    }\n\n    function battle(pOneFaceUp, pTwoFaceUp) {\n        let fd1 = 1\n        let fd2 = 2\n        let fd3 = 3\n        let potArray = [];\n\n        if (pOneFaceUp.face === 'false' && pTwoFaceUp.face === 'false') {\n            let pOneFaceDownOne = pOneDeck[fd1]\n            let pOneFaceDownTwo = pOneDeck[fd2]\n            let pOneFaceDownThree = pOneDeck[fd3]\n\n            let pTwoFaceDownOne = pTwoDeck[fd1]\n            let pTwoFaceDownTwo = pTwoDeck[fd2]\n            let pTwoFaceDownThree = pTwoDeck[fd3]\n\n            potArray.push(pOneFaceDownOne)\n            potArray.push(pOneFaceDownTwo)\n            potArray.push(pOneFaceDownThree)\n            potArray.push(pOneFaceUp)\n\n            potArray.push(pTwoFaceDownOne)\n            potArray.push(pTwoFaceDownTwo)\n            potArray.push(pTwoFaceDownThree)\n            potArray.push(pTwoFaceUp)\n            // console.log(potArray, \"POT ARRAY WHEN CARDS ARE NOT FCs\")\n\n            if (Number(pOneFaceUp.number) < Number(pTwoFaceUp.number)) {\n                sessionStorage.setItem('winner', 2)\n            } else {\n                sessionStorage.setItem('winner', 1)\n            }\n\n        } else {\n            let pOneFaceDownOne = pOneDeck[fd1]\n            let pOneFaceDownTwo = pOneDeck[fd2]\n            let pOneFaceDownThree = pOneDeck[fd3]\n\n            potArray.push(pOneFaceDownOne)\n            potArray.push(pOneFaceDownTwo)\n            potArray.push(pOneFaceDownThree)\n            potArray.push(pOneFaceUp)\n\n            let pTwoFaceDownOne = pTwoDeck[fd1]\n            let pTwoFaceDownTwo = pTwoDeck[fd2]\n            let pTwoFaceDownThree = pTwoDeck[fd3]\n\n            potArray.push(pTwoFaceDownOne)\n            potArray.push(pTwoFaceDownTwo)\n            potArray.push(pTwoFaceDownThree)\n            potArray.push(pTwoFaceUp)\n            // console.log(potArray, \"POT ARRAY WHEN ATLEAST ONE CARD IS FC\")\n\n            let pOneFUVal = translateFC(pOneFaceUp.number)\n            let pTwoFUVal = translateFC(pTwoFaceUp.number)\n            if (pOneFUVal > pTwoFUVal) {\n                sessionStorage.setItem('winner', 1)\n            } else {\n                sessionStorage.setItem('winner', 2)\n            }\n\n        }\n        return potArray;\n    }\n\n\n    const Phase = {\n        Draw: 'Draw',\n        Calculation: 'Calculation',\n        War: 'War',\n        Distribution: 'Distribution',\n        End: 'End',\n    }\n\n    const currentPhase = sessionStorage.getItem('phase')\n    const [phase, setPhase] = useState(currentPhase ? currentPhase : null)\n    const [pOneCardSuit, setPOneCardSuit] = useState();\n    const [pTwoCardSuit, setPTwoCardSuit] = useState();\n    const [pOneCardNumber, setPOneCardNumber] = useState();\n    const [pTwoCardNumber, setPTwoCardNumber] = useState();\n    // console.log(phase, \"CURRENT PHASE\")\n\n\n\n    useEffect(async () => {\n        const shuffledDeck = shuffle(deck)\n        setShuffledDeck(shuffledDeck)\n        distributeCards(shuffledDeck)\n\n        const data = await dispatch(playerDecks.get_player_decks())\n        await dispatch(playerDecks.getPot())\n\n        if (data.playerOneDeck.length && data.playerTwoDeck.length) {\n            setRenderStartBtn(false)\n        }\n\n        // calculate(\"7H,8,Heart,false\", \"7D,8,Diamond,false\")\n\n\n\n        console.log(\"RERENDER\")\n        switch (phase) {\n            case Phase.Draw:\n                console.log(\"REACHED DRAW PHASE\")\n                await dispatch(playerDecks.drawCards())\n                // const pOneDraw = pOneDeck.shift()\n                const pOneDraw = pOneCard;\n                console.log(pOneDraw, \"PONE DRAW\")\n                // const pTwoDraw = pTwoDeck.shift()\n                const pTwoDraw = pTwoCard;\n                console.log(pTwoDraw, \"PTWO DRAW\")\n\n                if (!pOneDeck.length || !pTwoDeck.length) {\n                    const timeout = setTimeout(async () => {\n                        setPhase(Phase.End)\n                        sessionStorage.setItem('phase', Phase.End)\n                    }, 3500)\n                    return () => clearTimeout(timeout)\n                }\n\n                const payload = [\n                    pOneDraw,\n                    pTwoDraw\n                ]\n                sessionStorage.setItem(\"pOneDraw\",\n                    [\n                        pOneDraw?.association,\n                        pOneDraw?.number,\n                        pOneDraw?.suit,\n                        pOneDraw?.face\n                    ])\n                sessionStorage.setItem(\"pOneCardSuit\", pOneDraw?.suit)\n                sessionStorage.setItem(\"pOneCardNum\", pOneDraw?.number)\n                setPOneCardSuit(sessionStorage.getItem(\"pOneCardSuit\"))\n                setPOneCardNumber(sessionStorage.getItem(\"pOneCardNum\"))\n\n\n                sessionStorage.setItem(\"pTwoDraw\",\n                    [\n                        pTwoDraw?.association,\n                        pTwoDraw?.number,\n                        pTwoDraw?.suit,\n                        pTwoDraw?.face\n                    ])\n                sessionStorage.setItem(\"pTwoCardSuit\", pTwoDraw?.suit)\n                sessionStorage.setItem(\"pTwoCardNum\", pTwoDraw?.number)\n                setPTwoCardSuit(sessionStorage.getItem(\"pTwoCardSuit\"))\n                setPTwoCardNumber(sessionStorage.getItem(\"pTwoCardNum\"))\n\n\n            // const timeout = setTimeout(async () => {\n            //     await dispatch(playerDecks.addToPot({ drawnCards: payload }))\n            //     setPhase(Phase.Calculation)\n            //     sessionStorage.setItem('phase', Phase.Calculation)\n            // }, 3500)\n\n            // return () => clearTimeout(timeout)\n\n            case Phase.Calculation:\n                console.log(\"REACHED CALCULATION PHASE\")\n                const pOneCard = sessionStorage.getItem(\"pOneDraw\")\n                const pTwoCard = sessionStorage.getItem(\"pTwoDraw\")\n                if (pOneCard && pTwoCard) {\n                    const timeout = setTimeout(() => {\n                        calculate(pOneCard, pTwoCard)\n                    }, 3500)\n\n                    return () => clearTimeout(timeout)\n                }\n                return;\n            case Phase.War:\n                console.log(\"REACHED WAR PHASE\")\n\n                //getting 5th card at index 4\n                let new_fu = 4\n                let pOneFaceUp = pOneDeck[new_fu]\n                console.log(pOneFaceUp, \"CURRENT FACEUP PLAYER ONE\")\n                let pTwoFaceUp = pTwoDeck[new_fu]\n                console.log(pTwoFaceUp, \"CURRENT FACEUP PLAYER TWO\")\n\n                if (!pTwoFaceUp || !pOneFaceUp) {\n                    const timeout = setTimeout(async () => {\n                        setPhase(Phase.End)\n                        sessionStorage.setItem('phase', Phase.End)\n                    }, 3500)\n                    return () => clearTimeout(timeout)\n                }\n\n                if (pOneFaceUp !== pTwoFaceUp) {\n                    const potArray = battle(pOneFaceUp, pTwoFaceUp)\n                    console.log(potArray, \"FINAL POT ARRAY WHEN SOMEONE WINS\")\n                    dispatch(playerDecks.addToPot({ drawnCards: potArray }))\n                    const timeout = setTimeout(() => {\n                        sessionStorage.setItem('phase', Phase.Distribution)\n                        setPhase(Phase.Distribution)\n                    }, 3500)\n                    return () => clearTimeout(timeout)\n                }\n                //getting all facedown cards after cards already held in pot\n                let fd1 = 1\n                let fd2 = 2\n                let fd3 = 3\n\n                let potArray = [];\n\n                while (pOneFaceUp === pTwoFaceUp) {\n\n                    let pOneFaceDownOne = pOneDeck[fd1]\n                    let pOneFaceDownTwo = pOneDeck[fd2]\n                    let pOneFaceDownThree = pOneDeck[fd3]\n\n                    potArray.push(pOneFaceDownOne)\n                    potArray.push(pOneFaceDownTwo)\n                    potArray.push(pOneFaceDownThree)\n                    potArray.push(pOneFaceUp)\n\n                    let pTwoFaceDownOne = pTwoDeck[fd1]\n                    let pTwoFaceDownTwo = pTwoDeck[fd2]\n                    let pTwoFaceDownThree = pTwoDeck[fd3]\n\n                    potArray.push(pTwoFaceDownOne)\n                    potArray.push(pTwoFaceDownTwo)\n                    potArray.push(pTwoFaceDownThree)\n                    potArray.push(pTwoFaceUp)\n                    console.log(potArray, \"POT ARRAY DURING AN ITERATION\")\n\n                    new_fu += new_fu\n                    fd1 += new_fu\n                    fd2 += new_fu\n                    fd3 += new_fu\n\n                }\n                console.log(potArray, \"FINAL POT ARRAY\")\n\n                let pOneFUVal = translateFC(pOneFaceUp.number)\n                let pTwoFUVal = translateFC(pTwoFaceUp.number)\n\n                if (potArray) {\n                    if (pOneFUVal < pTwoFUVal) {\n                        sessionStorage.setItem('winner', 2)\n                        dispatch(playerDecks.addToPot({ drawnCards: potArray }))\n                        const timeout = setTimeout(() => {\n                            sessionStorage.setItem('war', 'War')\n                            sessionStorage.setItem('phase', Phase.Distribution)\n                            setPhase(Phase.Distribution)\n                        }, 3500)\n                        return () => clearTimeout(timeout)\n                    } else {\n                        sessionStorage.setItem('winner', 1)\n                        dispatch(playerDecks.addToPot({ drawnCards: potArray }))\n                        const timeout = setTimeout(() => {\n                            sessionStorage.setItem('war', 'War')\n                            sessionStorage.setItem('phase', Phase.Distribution)\n                            setPhase(Phase.Distribution)\n                        }, 3500)\n                        return () => clearTimeout(timeout)\n                    }\n\n                }\n\n                return;\n            case Phase.Distribution:\n                console.log(\"REACHED DISTRIBUTION PHASE\")\n                // const playerOneCard = sessionStorage.getItem(\"pOneDraw\")\n                // const playerTwoCard = sessionStorage.getItem(\"pTwoDraw\")\n                const winner = sessionStorage.getItem(\"winner\")\n                const war = sessionStorage.getItem(\"war\")\n\n                if (war === \"No War\") {\n                    console.log(\"NO WAR\")\n                    if (Number(winner) === 1) {\n                        console.log('PLAYER ONE WON')\n                        const data = await dispatch(playerDecks.DeleteAndDistributePlayerCards({ winner: Number(winner) }))\n                        if (data) {\n                            const timeout = setTimeout(() => {\n                                setPhase(Phase.Draw)\n                                sessionStorage.setItem('phase', Phase.Draw)\n                            }, 3500)\n                            return () => clearTimeout(timeout)\n                        }\n                    }\n                    if (Number(winner) === 2) {\n                        console.log('PLAYER TWO WON')\n                        const data = await dispatch(playerDecks.DeleteAndDistributePlayerCards({ winner: Number(winner) }))\n                        if (data) {\n                            const timeout = setTimeout(() => {\n                                setPhase(Phase.Draw)\n                                sessionStorage.setItem('phase', Phase.Draw)\n                            }, 3500)\n                            return () => clearTimeout(timeout)\n                        }\n                    }\n                } else {\n                    console.log(\"WAR\")\n                    if (Number(winner) === 1) {\n                        console.log('PLAYER ONE WON WAR')\n                        const data = await dispatch(playerDecks.DeleteAndDistributePlayerCards({ winner: Number(winner) }))\n                        if (data) {\n                            const timeout = setTimeout(() => {\n                                setPhase(Phase.Draw)\n                                sessionStorage.setItem('phase', Phase.Draw)\n                            }, 3500)\n                            return () => clearTimeout(timeout)\n                        }\n                    }\n                    if (Number(winner) === 2) {\n                        console.log('PLAYER TWO WON WAR')\n                        const data = await dispatch(playerDecks.DeleteAndDistributePlayerCards({ winner: Number(winner) }))\n                        if (data) {\n                            const timeout = setTimeout(() => {\n                                setPhase(Phase.Draw)\n                                sessionStorage.setItem('phase', Phase.Draw)\n                            }, 3500)\n                            return () => clearTimeout(timeout)\n                        }\n                    }\n                }\n                return;\n            case Phase.End:\n                console.log(\"REACHED END PHASE\")\n                return;\n        }\n\n    }, [dispatch, renderStartBtn, phase])\n\n    return (\n        <div className=\"outmost_ctnr\">\n            <div className=\"card_count_ctnr\">\n                <p className=\"player_one_count_label\">\n                    Player One Card Count: {pOneDeck?.length}\n                </p>\n                <p className=\"player_two_count_label\">\n                    Player Two Card Count: {pTwoDeck?.length}\n                </p>\n            </div>\n            <div className=\"cards_ctnr\">\n                <div className=\"card_ctnr--left\">\n                    <div className=\"player_one_card one\" />\n                    <div className=\"player_one_card two\" />\n                    <div className=\"player_one_card three\" />\n                    <div className=\"player_one_card four\" />\n                    <div className=\"player_one_card five\" />\n                    <div className=\"player_one_card six\" />\n                    <div className=\"player_one_card seven\" />\n                    <div className=\"player_one_card eight\" />\n                    <div className=\"player_one_card nine\" />\n                    <div className=\"player_one_card ten\" />\n                </div>\n                <div className='phasePrompt'>\n                    {renderStartBtn && <li className='startGame_btn'\n                        onClick={async () => {\n                            const data = await dispatch(playerDecks.addDecksToDatabase({ playerOneDeck: playerOneCards, playerTwoDeck: playerTwoCards }))\n                            if (data) {\n                                setRenderStartBtn(false);\n                                sessionStorage.setItem('phase', Phase.Draw)\n                                setPhase(Phase.Draw)\n                            }\n                        }}\n                    >\n                        Start Game\n                    </li>}\n\n\n                </div>\n                <div className=\"card_ctnr--right\">\n                    <div className=\"player_two_card one\" />\n                    <div className=\"player_two_card two\" />\n                    <div className=\"player_two_card three\" />\n                    <div className=\"player_two_card four\" />\n                    <div className=\"player_two_card five\" />\n                    <div className=\"player_two_card six\" />\n                    <div className=\"player_two_card seven\" />\n                    <div className=\"player_two_card eight\" />\n                    <div className=\"player_two_card nine\" />\n                    <div className=\"player_two_card ten\" />\n                </div>\n            </div>\n            <div className=\"playing_field\">\n                <div className=\"pf--one\">\n                    <div className=\"playerOne_pf_card card-slot1\">\n\n                    </div>\n                    <div className=\"playerOne_pf_card card-slot2\">\n\n                    </div>\n                    <div className=\"playerOne_pf_card card-slot3\">\n\n                    </div>\n                    <div className=\"playerOne_pf_card card-slot4\">\n                        <div className=\"top_suit_ctnr\">\n                            <li className=\"card_num\">{pOneCardNumber}</li>\n                            <img src={(pOneCardSuit === 'Club' && club) || (pOneCardSuit === 'Heart' && heart) || (pOneCardSuit === 'Diamond' && diamond) || (pOneCardSuit === 'Spade' && spade)} className=\"suit--top\" />\n                        </div>\n                        <div className=\"mid_suit_ctnr\">\n                            <img src={(pOneCardSuit === 'Club' && club) || (pOneCardSuit === 'Heart' && heart) || (pOneCardSuit === 'Diamond' && diamond) || (pOneCardSuit === 'Spade' && spade)} className=\"suit--mid\" />\n                        </div>\n                        <div className=\"bottom_suit_ctnr\">\n                            <img src={(pOneCardSuit === 'Club' && club) || (pOneCardSuit === 'Heart' && heart) || (pOneCardSuit === 'Diamond' && diamond) || (pOneCardSuit === 'Spade' && spade)} className=\"suit--bottom\" />\n                            <li className=\"card_num\">{pOneCardNumber}</li>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"pf--two\">\n                    <div className=\"playerTwo_pf_card card-slot1\">\n                        <div className=\"top_suit_ctnr\">\n                            <li className=\"card_num\" >{pTwoCardNumber}</li>\n                            <img src={(pTwoCardSuit === 'Club' && club) || (pTwoCardSuit === 'Heart' && heart) || (pTwoCardSuit === 'Diamond' && diamond) || (pTwoCardSuit === 'Spade' && spade)} className=\"suit--top\" />\n                        </div>\n                        <div className=\"mid_suit_ctnr\">\n                            <img src={(pTwoCardSuit === 'Club' && club) || (pTwoCardSuit === 'Heart' && heart) || (pTwoCardSuit === 'Diamond' && diamond) || (pTwoCardSuit === 'Spade' && spade)} className=\"suit--mid\" />\n                        </div>\n                        <div className=\"bottom_suit_ctnr\">\n                            <img src={(pTwoCardSuit === 'Club' && club) || (pTwoCardSuit === 'Heart' && heart) || (pTwoCardSuit === 'Diamond' && diamond) || (pTwoCardSuit === 'Spade' && spade)} className=\"suit--bottom\" />\n                            <li className=\"card_num\">{pTwoCardNumber}</li>\n                        </div>\n\n                    </div>\n                    <div className=\"playerTwo_pf_card card-slot2\">\n\n                    </div>\n                    <div className=\"playerTwo_pf_card card-slot3\">\n\n                    </div>\n                    <div className=\"playerTwo_pf_card card-slot4\">\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Mainpage;"]},"metadata":{},"sourceType":"module"}