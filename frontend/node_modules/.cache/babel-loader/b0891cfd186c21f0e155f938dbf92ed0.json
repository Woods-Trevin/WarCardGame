{"ast":null,"code":"const ADD_CARDS_TO_PONE_DECKS = 'deck/ADD_CARDS_TO_PONE_DECKS';\nconst ADD_CARDS_TO_PTWO_DECKS = 'deck/ADD_CARDS_TO_PTWO_DECKS';\nconst DISTRIBUTED_PONE_CARDS = 'deck/DISTRIBUTED_PONE_CARDS';\nconst DISTRIBUTED_PTWO_CARDS = 'deck/DISTRIBUTED_PTWO_CARDS';\n\nconst add_to_pOne_deck = deck => {\n  return {\n    type: ADD_CARDS_TO_PONE_DECKS,\n    payload: deck\n  };\n};\n\nconst add_to_pTwo_deck = deck => {\n  return {\n    type: ADD_CARDS_TO_PTWO_DECKS,\n    payload: deck\n  };\n};\n\nconst new_player_one_deck = deck => {\n  return {\n    type: DISTRIBUTED_PONE_CARDS,\n    payload: deck\n  };\n};\n\nconst new_player_two_deck = deck => {\n  return {\n    type: DISTRIBUTED_PTWO_CARDS,\n    payload: deck\n  };\n};\n\nexport const get_player_decks = () => async dispatch => {\n  const response = await fetch('/war/playerDecks');\n\n  if (response.ok) {\n    const data = await response.json();\n    await dispatch(add_to_pOne_deck(data.playerOneDeck));\n    await dispatch(add_to_pTwo_deck(data.playerTwoDeck));\n    return data;\n  }\n};\nexport const addDecksToDatabase = body => async dispatch => {\n  const response = await fetch('/war/start', {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    await dispatch(add_to_pOne_deck(data.playerOneDeck));\n    await dispatch(add_to_pTwo_deck(data.playerTwoDeck));\n    return data;\n  }\n};\nexport const distributeToPlayerOneDeck = body => async dispatch => {\n  const response = await fetch('');\n};\nexport const distributeToPlayerTwoDeck = body => async dispatch => {};\nconst initialState = {\n  decks: null\n};\n\nconst playerDeckReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newState;\n\n  switch (action.type) {\n    case ADD_CARDS_TO_PONE_DECKS:\n      newState = Object.assign({}, state);\n      newState.playerOneDeck = action.payload;\n      return newState;\n\n    case ADD_CARDS_TO_PTWO_DECKS:\n      newState = Object.assign({}, state);\n      newState.playerTwoDeck = action.payload;\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default playerDeckReducer;","map":{"version":3,"sources":["/Users/liu/Desktop/AppAcademy/TakeHomeProj/frontend/war_card_game/src/store/playerdecks.js"],"names":["ADD_CARDS_TO_PONE_DECKS","ADD_CARDS_TO_PTWO_DECKS","DISTRIBUTED_PONE_CARDS","DISTRIBUTED_PTWO_CARDS","add_to_pOne_deck","deck","type","payload","add_to_pTwo_deck","new_player_one_deck","new_player_two_deck","get_player_decks","dispatch","response","fetch","ok","data","json","playerOneDeck","playerTwoDeck","addDecksToDatabase","body","method","headers","JSON","stringify","distributeToPlayerOneDeck","distributeToPlayerTwoDeck","initialState","decks","playerDeckReducer","state","action","newState","Object","assign"],"mappings":"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","sourcesContent":["const ADD_CARDS_TO_PONE_DECKS = 'deck/ADD_CARDS_TO_PONE_DECKS';\nconst ADD_CARDS_TO_PTWO_DECKS = 'deck/ADD_CARDS_TO_PTWO_DECKS';\nconst DISTRIBUTED_PONE_CARDS = 'deck/DISTRIBUTED_PONE_CARDS'\nconst DISTRIBUTED_PTWO_CARDS = 'deck/DISTRIBUTED_PTWO_CARDS'\n\n\nconst add_to_pOne_deck = (deck) => {\n    return {\n        type: ADD_CARDS_TO_PONE_DECKS,\n        payload: deck\n    }\n}\n\nconst add_to_pTwo_deck = (deck) => {\n    return {\n        type: ADD_CARDS_TO_PTWO_DECKS,\n        payload: deck\n    }\n}\n\nconst new_player_one_deck = (deck) => {\n    return {\n        type: DISTRIBUTED_PONE_CARDS,\n        payload: deck\n    }\n}\n\nconst new_player_two_deck = (deck) => {\n    return {\n        type: DISTRIBUTED_PTWO_CARDS,\n        payload: deck\n    }\n}\n\nexport const get_player_decks = () => async (dispatch) => {\n\n    const response = await fetch('/war/playerDecks')\n\n    if (response.ok) {\n        const data = await response.json()\n        await dispatch(add_to_pOne_deck(data.playerOneDeck))\n        await dispatch(add_to_pTwo_deck(data.playerTwoDeck))\n        return data\n    }\n}\n\n\n\nexport const addDecksToDatabase = (body) => async (dispatch) => {\n\n    const response = await fetch('/war/start', {\n        method: \"POST\",\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body)\n    })\n\n    if (response.ok) {\n        const data = await response.json();\n        await dispatch(add_to_pOne_deck(data.playerOneDeck))\n        await dispatch(add_to_pTwo_deck(data.playerTwoDeck))\n        return data\n    }\n\n}\n\nexport const distributeToPlayerOneDeck = (body) => async (dispatch) => {\n    const response = await fetch('',)\n\n\n}\n\nexport const distributeToPlayerTwoDeck = (body) => async (dispatch) => {\n\n\n\n}\n\n\nconst initialState = { decks: null }\n\nconst playerDeckReducer = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ADD_CARDS_TO_PONE_DECKS:\n            newState = Object.assign({}, state);\n            newState.playerOneDeck = action.payload\n            return newState;\n        case ADD_CARDS_TO_PTWO_DECKS:\n            newState = Object.assign({}, state);\n            newState.playerTwoDeck = action.payload\n            return newState;\n        default:\n            return state;\n    }\n}\n\nexport default playerDeckReducer;"]},"metadata":{},"sourceType":"module"}