{"ast":null,"code":"const ADD_CARDS_TO_DECKS = 'deck/ADD_CARDS_TO_DECKS';\nconst GET_DECKS = 'decks/GET_DECKS';\nconst ADD_TO_POT = 'pot/ADD_TO_POT';\nconst GET_POT = 'pot/GET_POT';\nconst DELETE_DISTRIBUTE_PLAYER_CARDS = 'delete/DELETE_DISTRIBUTE_PLAYER_CARDS';\n\nconst add_cards_to_decks = deck => {\n  return {\n    type: ADD_CARDS_TO_DECKS,\n    payload: deck\n  };\n};\n\nconst get_decks = deck => {\n  return {\n    type: GET_DECKS,\n    payload: deck\n  };\n};\n\nconst add_to_pot = pot => {\n  return {\n    type: ADD_TO_POT,\n    payload: pot\n  };\n};\n\nconst get_pot = pot => {\n  return {\n    type: GET_POT,\n    payload: pot\n  };\n};\n\nconst delete_distribute_player_card = deck => {\n  return {\n    type: DELETE_DISTRIBUTE_PLAYER_CARDS,\n    payload: deck\n  };\n};\n\nexport const get_player_decks = () => async dispatch => {\n  const response = await fetch('/war/playerDecks');\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(get_decks({\n      POneDeck: data.playerOneDeck,\n      PTwoDeck: data.playerTwoDeck\n    }));\n    return data;\n  }\n};\nexport const addDecksToDatabase = body => async dispatch => {\n  console.log(body);\n  const response = await fetch('/war/start', {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(add_cards_to_decks({\n      pOneData: data.playerOneDeck,\n      pTwoData: data.playerTwoDeck\n    }));\n    return data;\n  }\n};\nexport const DeleteAndDistributePlayerCards = body => async dispatch => {\n  const response = await fetch(`/war/deleteCards/`, {\n    method: \"Delete\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(delete_distribute_player_card({\n      dataOne: data.newPOneDeck,\n      dataTwo: data.newPTwoDeck\n    }));\n    return data;\n  }\n};\nexport const getPot = body => async dispatch => {\n  const response = await fetch('/war/pot');\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(get_pot(data.pot));\n    return data;\n  }\n};\nexport const addToPot = body => async dispatch => {\n  const response = await fetch('/war/pot', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(add_to_pot({\n      pot: data.pot,\n      newPOneDeck: data.newPlayerOneDeck,\n      newPTwoDeck: data.newPlayerTwoDeck\n    }));\n    return data;\n  }\n};\nconst initialState = {\n  decks: null\n};\n\nconst playerDeckReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newState;\n\n  switch (action.type) {\n    case GET_DECKS:\n      newState = Object.assign({}, state);\n      newState.playerOneDeck = action.payload.POneDeck;\n      newState.playerTwoDeck = action.payload.PTwoDeck;\n      return newState;\n\n    case ADD_CARDS_TO_DECKS:\n      newState = Object.assign({}, state);\n      newState.playerOneDeck = action.payload.pOneData;\n      newState.playerTwoDeck = action.payload.pTwoData;\n      return newState;\n\n    case ADD_TO_POT:\n      newState = Object.assign({}, state);\n      newState.pot = action.payload.pot;\n      newState.playerOneDeck = action.payload.newPOneDeck;\n      newState.playerTwoDeck = action.payload.newPTwoDeck;\n      return newState;\n\n    case GET_POT:\n      newState = Object.assign({}, state);\n      newState.pot = action.payload;\n      return newState;\n\n    case DELETE_DISTRIBUTE_PLAYER_CARDS:\n      newState = Object.assign({}, state);\n      newState.playerOneDeck = action.payload.dataOne;\n      newState.playerTwoDeck = action.payload.dataTwo;\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default playerDeckReducer;","map":{"version":3,"sources":["/Users/liu/Desktop/AppAcademy/TakeHomeProj/frontend/war_card_game/src/store/playerdecks.js"],"names":["ADD_CARDS_TO_DECKS","GET_DECKS","ADD_TO_POT","GET_POT","DELETE_DISTRIBUTE_PLAYER_CARDS","add_cards_to_decks","deck","type","payload","get_decks","add_to_pot","pot","get_pot","delete_distribute_player_card","get_player_decks","dispatch","response","fetch","ok","data","json","POneDeck","playerOneDeck","PTwoDeck","playerTwoDeck","addDecksToDatabase","body","console","log","method","headers","JSON","stringify","pOneData","pTwoData","DeleteAndDistributePlayerCards","dataOne","newPOneDeck","dataTwo","newPTwoDeck","getPot","addToPot","newPlayerOneDeck","newPlayerTwoDeck","initialState","decks","playerDeckReducer","state","action","newState","Object","assign"],"mappings":"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","sourcesContent":["const ADD_CARDS_TO_DECKS = 'deck/ADD_CARDS_TO_DECKS';\nconst GET_DECKS = 'decks/GET_DECKS';\nconst ADD_TO_POT = 'pot/ADD_TO_POT';\nconst GET_POT = 'pot/GET_POT';\nconst DELETE_DISTRIBUTE_PLAYER_CARDS = 'delete/DELETE_DISTRIBUTE_PLAYER_CARDS';\n\n\nconst add_cards_to_decks = (deck) => {\n    return {\n        type: ADD_CARDS_TO_DECKS,\n        payload: deck\n    }\n}\n\nconst get_decks = (deck) => {\n    return {\n        type: GET_DECKS,\n        payload: deck\n    }\n}\n\nconst add_to_pot = (pot) => {\n    return {\n        type: ADD_TO_POT,\n        payload: pot\n    }\n}\n\nconst get_pot = (pot) => {\n    return {\n        type: GET_POT,\n        payload: pot\n    }\n}\n\nconst delete_distribute_player_card = (deck) => {\n    return {\n        type: DELETE_DISTRIBUTE_PLAYER_CARDS,\n        payload: deck\n    }\n}\n\n\n\nexport const get_player_decks = () => async (dispatch) => {\n\n    const response = await fetch('/war/playerDecks')\n\n    if (response.ok) {\n        const data = await response.json()\n        dispatch(get_decks({ POneDeck: data.playerOneDeck, PTwoDeck: data.playerTwoDeck }))\n        return data\n    }\n}\n\n\n\nexport const addDecksToDatabase = (body) => async (dispatch) => {\n    console.log(body)\n\n    const response = await fetch('/war/start', {\n        method: \"POST\",\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body)\n    })\n\n    if (response.ok) {\n        const data = await response.json();\n        dispatch(add_cards_to_decks({ pOneData: data.playerOneDeck, pTwoData: data.playerTwoDeck }))\n        return data\n    }\n\n}\n\nexport const DeleteAndDistributePlayerCards = (body) => async (dispatch) => {\n    const response = await fetch(`/war/deleteCards/`, {\n        method: \"Delete\",\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body)\n    })\n\n    if (response.ok) {\n        const data = await response.json();\n        dispatch(delete_distribute_player_card({ dataOne: data.newPOneDeck, dataTwo: data.newPTwoDeck }))\n        return data\n    }\n}\n\n\nexport const getPot = (body) => async (dispatch) => {\n    const response = await fetch('/war/pot')\n\n    if (response.ok) {\n        const data = await response.json()\n        dispatch(get_pot(data.pot))\n        return data\n    }\n\n}\n\nexport const addToPot = (body) => async (dispatch) => {\n\n    const response = await fetch('/war/pot', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body)\n    })\n\n    if (response.ok) {\n        const data = await response.json()\n        dispatch(add_to_pot({ pot: data.pot, newPOneDeck: data.newPlayerOneDeck, newPTwoDeck: data.newPlayerTwoDeck }))\n        return data\n    }\n\n}\n\n\n\n\n\nconst initialState = { decks: null }\n\nconst playerDeckReducer = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case GET_DECKS:\n            newState = Object.assign({}, state);\n            newState.playerOneDeck = action.payload.POneDeck;\n            newState.playerTwoDeck = action.payload.PTwoDeck;\n            return newState;\n        case ADD_CARDS_TO_DECKS:\n            newState = Object.assign({}, state);\n            newState.playerOneDeck = action.payload.pOneData;\n            newState.playerTwoDeck = action.payload.pTwoData;\n            return newState;\n        case ADD_TO_POT:\n            newState = Object.assign({}, state);\n            newState.pot = action.payload.pot;\n            newState.playerOneDeck = action.payload.newPOneDeck;\n            newState.playerTwoDeck = action.payload.newPTwoDeck;\n            return newState;\n        case GET_POT:\n            newState = Object.assign({}, state);\n            newState.pot = action.payload;\n            return newState;\n        case DELETE_DISTRIBUTE_PLAYER_CARDS:\n            newState = Object.assign({}, state);\n            newState.playerOneDeck = action.payload.dataOne;\n            newState.playerTwoDeck = action.payload.dataTwo;\n            return newState;\n        default:\n            return state;\n    }\n}\n\nexport default playerDeckReducer;"]},"metadata":{},"sourceType":"module"}